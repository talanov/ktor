import java.util.concurrent.TimeUnit

description = 'Common tests for client'

apply plugin: "kotlinx-serialization"

class KtorTestServer extends DefaultTask {
    public FileCollection classpath
    public String main
    public Object server

    @TaskAction
    public void exec() {
        def urlClassLoaderSource = classpath.collect { file -> file.toURI().toURL() }
        def loader = new URLClassLoader(urlClassLoaderSource.toArray() as URL[], ClassLoader.systemClassLoader)

        def mainClass = loader.loadClass(main)
        def main = mainClass.getMethod("startServer")
        try {
            server = main.invoke(null)
        } catch (ignored) {}
    }
}

kotlin.sourceSets {
    commonMain.dependencies {
        api project(':ktor-client:ktor-client-core')
        api project(':ktor-client:ktor-client-mock')
        api project(':ktor-client:ktor-client-tests:ktor-client-tests-dispatcher')
    }
    commonTest.dependencies {
        api project(':ktor-client:ktor-client-features:ktor-client-json')
    }
    jvmMain.dependencies {
        api project(':ktor-server:ktor-server-jetty')
        api project(':ktor-server:ktor-server-netty')
        api group: 'ch.qos.logback', name: 'logback-classic', version: logback_version
        api group: 'junit', name: 'junit', version: junit_version
        api group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlin_version
    }
    jvmTest.dependencies {
        runtimeOnly project(':ktor-client:ktor-client-apache')
        runtimeOnly project(':ktor-client:ktor-client-cio')
        runtimeOnly project(':ktor-client:ktor-client-android')
        runtimeOnly project(':ktor-client:ktor-client-okhttp')
        runtimeOnly project(':ktor-client:ktor-client-jetty')
    }
    jsTest.dependencies {
        api project(':ktor-client:ktor-client-js')
    }
    if (!project.ext.ideaActive) {
        configure([linuxX64Test, mingwX64Test, macosX64Test]) {
            dependencies {
                api project(':ktor-client:ktor-client-curl')
            }
        }

        configure([iosX64Test, iosArm32Test, iosArm64Test, macosX64Test]) {
            dependencies {
                api project(':ktor-client:ktor-client-ios')
            }
        }
    }
}

task startTestServer(type: KtorTestServer, dependsOn: assemble) {
    main = "io.ktor.client.tests.utils.TestServerKt"
    classpath = kotlin.targets.jvm.compilations["test"].runtimeDependencyFiles
}

if (!project.ext.ideaActive) {
    def testTasks = [
        'macosX64Test', 'linuxX64Test', 'iosTest', 'mingwX64Test', 'jvmTest', 'testMochaChrome', 'testMochaNode',
        'benchmark', 'jvmBenchmark'
    ]

    rootProject.allprojects {
        it.tasks.findAll { it.name in testTasks }.each { testTask ->
            testTask.dependsOn startTestServer
        }
    }
}

gradle.buildFinished {
    if (startTestServer.server != null) {
        startTestServer.server.stop(0L, 0L, TimeUnit.MILLISECONDS)
    }
}
